<template>
	<view class="app" >
		<view class="top">
			<!-- 头像 -->
			<view class="left">
				<view class="icon">
					<image class="img" src="../../static/image/icon.png" mode="scaleToFill"></image>
				</view>
				<view class="date">
					{{ year }}年{{ month + 1}}月
				</view>
			</view>
			<view class="right">
				<view class="search">
					<image class="img" src="../../static/image/find.png" mode="scaleToFill"></image>
				</view>
			</view>
		</view>
<!-- 		<view class="button">
			<view @click="topMonth()">上个月</view>
			<view @click="bottomMonth()">下个月</view>
			<view @click="clickNowDay()">今日</view>
		</view> -->
		<view class="centen">
			<!-- 日程表 -->
			<view class="calendar">
				<view class="week">
					<view class="weeks" v-for="(item, index) in weeks" :key="index">
						{{ item.week }}
					</view>
				</view>
				<view class="day">
					<!-- @click="clickNow(year, month, i)" -->
					<!-- 						@click="clickNow(year, month + 1, item)" -->
					<view class="days-before" v-for="(item,index) in beforeNumberAddNum" :key="index" @click="topMonth()">
						<view class="d">{{item}}</view>
						<view class="info">
							<view class="date">8h</view>
							<view class="txt"></view>
							<view class="date">9h</view>
							<view class="txt"></view>
							<view class="date">10h</view>
							<view class="txt"></view>
							<view class="date">11h</view>
							<view class="txt"></view>
							<view class="date">2h</view>
							<view class="txt"></view>
							<view class="date">3h</view>
							<view class="txt"></view>
							<view class="date">4h</view>
							<view class="txt"></view>
							<view class="date">5h</view>
							<view class="txt"></view>
						</view>
					</view>
					<view class="days" v-for="(item,index) in monthDays" :key="index"
						@click="clickNowDay()">
						<view class="d">{{item}}</view>
						<view class="info">
							<view class="date">8am</view>
							<view class="txt">8点吃个黄焖鸡</view>
						</view>
						<view class="info">
							<view class="date">9am</view>
							<view class="txt">9点刷会手机，发呆</view>
						</view>
						<view class="info">
							<view class="date">10am</view>
							<view class="txt">10点心情好，不饿不吃饭。</view>
						</view>
						<view class="info">
							<view class="date">11am</view>
							<view class="txt">11点我心情超好，打算吃牛奶燕麦。</view>
						</view>
						<view class="info">
							<view class="date">2pm</view>
							<view class="txt">下午两点我心情不错，打算吃个福建人。</view>
						</view>
						<view class="info">
							<view class="date">3pm</view>
							<view class="txt"> </view>
						</view>
						<view class="info">
							<view class="date">4pm</view>
							<view class="txt">4点早下班，出去遛弯，顺便吃会灰。</view>

						</view>
						<view class="info">
							<view class="date">5pm</view>
							<view class="txt">正常下班那不是简简单单~。</view>
						</view>
						<view class="info">
							<view class="date">6pm</view>
							<view class="txt">都六点了，我还在苦哈哈奋斗，承受了我这个年纪不该承受的痛。</view>
						</view>

					</view>
					<!-- @click="clickNow(year, month + 1, ite)" -->
					<view class="days-after" style="color: gray;" v-for="(item,index) in afterMonthDays" :key="index" @click="bottomMonth()">
						<view class="d">{{item}}</view>
						<view class="info">
							<view class="date">8h:</view>
							<view class="txt"></view>
							<view class="date">9h:</view>
							<view class="txt"></view>
							<view class="date">10h:</view>
							<view class="txt"></view>
							<view class="date">11h:</view>
							<view class="txt"></view>
							<view class="date">2h:</view>
							<view class="txt"></view>
							<view class="date">3h:</view>
							<view class="txt"></view>
							<view class="date">4h:</view>
							<view class="txt"></view>
							<view class="date">5h:</view>
							<view class="txt"></view>
						</view>
					</view>
				</view>
			</view>
		</view>

		<view class="bottom">
		</view>
	</view>

</template>

<script setup>
	// 当前时间
	const currentDate = new Date()
	// 年
	const year = ref(currentDate.getFullYear())
	// 月
	const month = ref(currentDate.getMonth())
	// 日
	const day = ref(currentDate.getDate())
	// 一共多少天
	const totleWeekDays = ref()
	// 当前月一号星期几
	const startMonthWeek = ref()
	// 当月界面完整天数
	const monthDays = ref([])
	// 当月前空数据
	const monthBeforeNull = ref()
	// 上个月数据
	const beforeMonth = ref()
	// 上个月需要补到这个月天数
	const beforeNumberAddNum = ref()
	// 下个月 补充的天数
	const afterMonthDays = ref()

	const weeks = ref([
		{
			id: 0,
			week: "日",
		},
		{
			id: 1,
			week: "一",
		},
		{
			id: 2,
			week: "二",
		},
		{
			id: 3,
			week: "三",
		},
		{
			id: 4,
			week: "四",
		},
		{
			id: 5,
			week: "五",
		}, {
			id: 6,
			week: "六",
		},
	])

	function getData() {
		// 一共多少天
		totleWeekDays.value = new Date(year.value, month.value + 1, 0).getDate()
		console.log("这个月一共：" + totleWeekDays.value)

		// 当月首天星期几
		startMonthWeek.value = new Date(year.value, month.value, 1).getDay()
		if (startMonthWeek.value === 0) {
			startMonthWeek.value += 1
		}
		console.log("这个月一号星期几：" + startMonthWeek.value)

		// 当月前空数据 通过查找周期数据返回前面有空数据
		const id = startMonthWeek.value
		const index = weeks.value.findIndex(item => item.id === id)
		const count = index > 0 ? index : 0;
		monthBeforeNull.value = count
		console.log("当月前空数据：", count)


		// 当月界面整体天数
		const monthDay = []
		for (let i = 1; i <= totleWeekDays.value; i++) {
			monthDay.push(Number(i))
		}

		const beforeMonthDayNum = new Date(year.value, month.value, 0).getDate()
		console.log("上个月补充数据：", beforeMonthDayNum)
		const beforeMonthDays = []
		for (let i = 1; i <= beforeMonthDayNum; i++) {
			beforeMonthDays.push(i)
		}
		console.log("上个月数据：", beforeMonthDays)
		beforeMonth.value = beforeMonthDays
		// 获取上个月末尾数据 并赋值
		const anum = monthBeforeNull.value
		const lastFour = beforeMonth.value.slice(- anum);
		beforeNumberAddNum.value = lastFour
		console.log("上个月补充数据：", lastFour)


		monthDays.value = monthDay
		console.log("当月总天数数组：", monthDay)

		// 获取下个月数据 最多35天
		const sliceArr = monthDay.slice(0, 35 - anum)
		const sliceLen = sliceArr.length
		let afterArr = []
		if (sliceLen < 35) {
			let num = 35 - sliceLen - anum
			console.log("下个月需要补齐长度：", num)
			for (let i = 1; i <= num; i++) {
				afterArr.push(i)
			}
		}
		afterMonthDays.value = afterArr
	}

	function topMonth() {
		if (month.value <= 0) {
			month.value = 11
			year.value = year.value - 1
		} else {
			month.value = month.value - 1
		}
		getData()
	}

	function bottomMonth() {
		if (month.value >= 11) {
			month.value = 0
			year.value = year.value + 1
		} else {
			month.value = month.value + 1
		}
		getData()
	}

	// 点击当月 后续拓展功能
	function clickNow(iyear, imonth, iday) {
		let item = 0
		const Y = JSON.stringify(iyear)
		const M = JSON.stringify(imonth)
		const D = JSON.stringify(iday)
		const now = Y + M + D
		console.log(111, now)
	}

	function clickNowDay() {
		const nowDate = new Date()
		year.value = nowDate.getFullYear()
		month.value = nowDate.getMonth()
		day.value = nowDate.getDay()
		getData()
	}

	onMounted(() => {
		getData()
	})
</script>


<style lang="scss">
	.app {
		width: 100%;
		height: 100%;
		display: flex;
		padding: 5rpx;
	}
	
	// <view class="top">
	// 	<!-- 头像 -->
	// 	<view class="icon">
	// 		头像
	// 	</view>
	// 	<view class="date">
	// 		{{ year }} 年 {{ month + 1}} 月
	// 	</view>
	// 	<view class="search">?</view>
	// </view>

	.top {
		display: flex;
		height: 4rem;
		width: 100%;
		justify-content: space-between;
		flex-direction: row;
		background-color: #fcfcfc;
		.left {
			width: 50%;
			height: 4rem;
			flex-direction: row;
			justify-content: left;
			align-items: center;
			padding: 10rpx;
			.icon {
				width: 28%;
				height: 60%;
				padding: 8rpx;
				padding-bottom: 20%; /* 创建一个正方形 */
				border: 8rpx solid #99e5e5;
				border-radius: 50%;
				background-color: transparent;
				margin-right: 10rpx;
				.img {
					display: flex;
					justify-content: center;
					align-items: center;
					width: 68rpx;
					height: 68rpx;
				}
			}
			.date {
				font-size: 28rpx;
				font-weight: 1000;
			}
		}
		.right {
			width: 50%;
			height: 4rem;
			.search {
				width: 100%;
				height: 100%;
				display: flex;
				flex-direction: row;
				justify-content: center;
				align-items: center;
				.img {
					width: 68rpx;
					height: 68rpx;
				}
			}
		}

	}

	.centen {
		height: 34rem;
		width: 100%;
		.calendar {

			.week {
				width: 100%;
				flex-direction: row;
				flex-wrap: wrap;
				align-items: flex-start;
				border-bottom: 1rpx solid #e8e8e8;
				padding-bottom: 18rpx;
				padding-top: 18rpx;
				background-color: #f8f8f8;

				.weeks {
					width: 14%;
					color: #4b4b4b;
					align-items: center;
					justify-content: center;
					display: inline-grid;
				}
			}

			.day {
				width: 100%;
				flex-direction: row;
				flex-wrap: wrap;
				align-items: flex-start;
				border-bottom: 1rpx solid #dadada;

				overflow-x: hidden; 
				overflow-y: scroll; 
				-webkit-overflow-scrolling: touch; 
				height: 100vh;

				.days-before {
					display: flex;
					width: 14%;
					font-size: 18rpx;
					white-space: normal;
					align-items: center;
					justify-content: center;
					display: inline-grid;

					// 日期
					.d {
						color: gray;
						font-size: 38rpx;
						align-items: center;
						justify-content: center;
						margin: 28rpx;
						padding-bottom: 28rpx;
						border-bottom: 1rpx solid #a6a6a6;
					}

					// 信息
					.info {
						display: flex;
						margin: 2rpx;

						// 小时
						.date {
							font-size: 18rpx;
							background-color: #dadada;
							color: #878787;
							align-items: center;
							justify-content: center;
						}

						// 备注
						.txt {
							font-size: 18rpx;
							color: #959570;
							min-height: 100rpx;
						}
					}
				}

				.days {
					display: flex;
					width: 14%;
					font-size: 18rpx;
					white-space: normal;
					align-items: center;
					justify-content: center;
					display: inline-grid;

					// 日期
					.d {
						font-size: 38rpx;
						align-items: center;
						justify-content: center;
						margin: 28rpx;
						padding-bottom: 28rpx;
						border-bottom: 1rpx solid #a6a6a6;
					}

					// 信息
					.info {
						display: flex;
						margin: 2rpx;

						// 小时
						.date {
							font-size: 18rpx;
							background-color: #dadada;
							color: #878787;
							align-items: center;
							justify-content: center;
						}

						// 备注
						.txt {
							font-size: 18rpx;
							color: #959570;
							min-height: 100rpx;
							background-color: #f5f5f5;
							border-radius: 10rpx;
							// transform: scale(0.9)
						}
					}
				}

				.days-after {
					display: flex;
					width: 14%;
					font-size: 18rpx;
					white-space: normal;
					align-items: center;
					justify-content: center;
					display: inline-grid;

					// 日期
					.d {
						color: gray;
						font-size: 38rpx;
						align-items: center;
						justify-content: center;
						margin: 28rpx;
						padding-bottom: 28rpx;
						border-bottom: 1rpx solid #a6a6a6;
					}

					// 信息
					.info {
						display: flex;
						margin: 2rpx;

						// 小时
						.date {
							font-size: 18rpx;
							background-color: #dadada;
							color: #878787;
							align-items: center;
							justify-content: center;
						}

						// 备注
						.txt {
							font-size: 18rpx;
							color: #959570;
							min-height: 100rpx;
						}
					}
				}
			}
		}
	}

	.bottom {
		width: 1000rpx;
		height: 100rpx;
	}
</style>